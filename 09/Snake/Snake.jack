class Snake {

    field Array blocks;
    field int curLength;
    static int maxSnakeSize;
    static int UP, DOWN, LEFT, RIGHT;

    constructor Snake new(int startX, int startY, int startLength) {
        var int i, dir;
        var SnakeBlock sb;
        let blocks = Array.new(maxSnakeSize);
        let i = 0;
        while (i < startLength) {
            let sb = SnakeBlock.new(startX, startY - i, DOWN);
            let blocks[i] = sb;
            do sb.draw();

            let i = i + 1;
        }
        let curLength = startLength;
        return this;
   	}

   	method void dispose() {
        do Memory.deAlloc(this);
        return;
   	}

    /** Moves the snake, redrawing blocks as needed */
    method void move() {
        var int i, prevDir, curDir;
        var SnakeBlock sb;
        let prevDir = -1;
        let curDir = -1;
        let i = 0;
        while (i < curLength) {
            let sb = blocks[i];

            do sb.clear();

            do sb.move();
            
            let curDir = sb.getDirection();
            do sb.draw();
            if (~(i=0)) {
                do sb.setDirection(prevDir);
            }

            let prevDir = curDir;

            let i = i + 1;
        }

        return;
    }

    /** Turns the snake's head in the specified direction */
    method void turn (int newDir) {
        var SnakeBlock head;
        var int headDir;
        let head = blocks[0];
        let headDir = head.getDirection();

        if (
            ((headDir = UP) & (newDir = DOWN)) |
            ((headDir = DOWN) & (newDir = UP)) |
            ((headDir = LEFT) & (newDir = RIGHT)) |
            ((headDir = RIGHT) & (newDir = LEFT)))
            { return; }

        do head.setDirection(newDir);
        return;
    }

    /** Checks whether or not the snake is eating itself */
    method boolean isEatingSelf() {
        var int i;
        var SnakeBlock head, sb;
        let head = blocks[0];
        let i = 1;
        while (i < curLength) {
            let sb = blocks[i];
            if ((head.getX() = sb.getX()) & (head.getY() = sb.getY())) {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }

    method int getHeadX() {
        var SnakeBlock head;
        let head = blocks[0];
        return head.getX();
    }

    method int getHeadY() {
        var SnakeBlock head;
        let head = blocks[0];
        return head.getY();
    }

    method void incrementLength() {
        var SnakeBlock sb;
        var int newX, newY, newDir;
        let sb = blocks[curLength - 1];
        let newDir = sb.getDirection();

        if (newDir = UP) {
            let newX = sb.getX();
            let newY = sb.getY() + 1;
        }
        if (newDir = DOWN) {
            let newX = sb.getX();
            let newY = sb.getY() - 1;
        }
        if (newDir = LEFT) {
            let newX = sb.getX() + 1;
            let newY = sb.getY();
        }
        if (newDir = RIGHT) {
            let newX = sb.getX() - 1;
            let newY = sb.getY();
        }
        let sb = SnakeBlock.new(newX, newY, newDir);
        do sb.draw();
        let blocks[curLength] = sb;
        let curLength = curLength + 1;

        return;
    }

    function void init () {
        let maxSnakeSize = SnakeBoard.getWidth() * SnakeBoard.getHeight();
        let UP = 0;
        let DOWN = 1;
        let LEFT = 2;
        let RIGHT = 3;
        return;
    }
}