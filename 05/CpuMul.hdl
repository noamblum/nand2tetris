// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    Not(in=instruction[15], out=isAinstruction);

    // A Register
    Mux16(a=ALUOutput, b[0..14]=instruction[0..14], b[15]=false, sel=isAinstruction, out=ARegisterInput);
    Or(a=isAinstruction, b=instruction[5], out=loadARegister);
    ARegister(in=ARegisterInput, load=loadARegister, out=ARegisterOutput, out[0..14]=addressM);

    // D Register
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=ALUOutput, load=loadDRegister, out=ALUx);

    // M Register
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Take from M or A
    Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=ALUy);

    // ALU
    ExtendAlu(x=ALUx, y=ALUy, instruction=instruction[6..14], out=ALUOutput, out=outM, zr=isZero, ng=isNeg);

    // PC
    PC(in=ARegisterOutput, load=PCLoad, inc=true, reset=reset, out[0..14]=pc);

    And(a=instruction[2], b=isNeg, out=jmpNeg);
    And(a=instruction[1], b=isZero, out=jumpEq);
    Or(a=isNeg, b=isZero, out=tmp);
    Not(in=tmp, out=isPos);
    And(a=instruction[0], b=isPos, out=jumpPos);
    Or(a=jmpNeg, b=jumpEq, out=jumpNE);
    Or(a=jumpNE, b=jumpPos, out=jump);
    And(a=instruction[15], b=jump, out=PCLoad);
}
