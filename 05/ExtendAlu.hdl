// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:

     And(a=instruction[8], b=instruction[7], out=useRegularALU);

     // Regular ALU
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUOut, zr=ALUzr, ng=ALUng);

     // Shift
     Mux16(a=y, b=x, sel=instruction[4], out=shiftIn);
     ShiftLeft(in=shiftIn, out=shiftedLeft);
     ShiftRight(in=shiftIn, out=shiftedRight);
     Mux16(a=shiftedRight, b=shiftedLeft, sel=instruction[5], out[0..7]=shiftOut1, out[8..14]=shiftOut2, out[15]=signBit);

     // Shift zr
     Or8Way(in=shiftOut1, out=tmp1);
     Or8Way(in[0..6]=shiftOut2, in[7]=signBit, out=tmp2);
     Or(a=tmp1, b=tmp2, out=NotShiftzr);
     Not(in=NotShiftzr, out=Shiftzr);

     // Shift ng
     And(a=signBit, b=true, out=Shiftng);

     // Output
     Mux16(a[0..7]=shiftOut1, a[8..14]=shiftOut2, a[15]=signBit, b=ALUOut, sel=useRegularALU, out=out);
     Mux(a=Shiftzr, b=ALUzr, sel=useRegularALU, out=zr);
     Mux(a=Shiftng, b=ALUng, sel=useRegularALU, out=ng);
}
