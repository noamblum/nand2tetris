// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

        static boolean curColor;
        static int screenBase, screenLen;

        /** Initializes the Screen. */
        function void init() {
            let curColor = true;
            let screenBase = 16384;
            let screenLen = 8192;
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;
            let i = screenBase;
            while (i < screenBase + screenLen) {
                do Memory.poke(screenBase + i, false);
                let i = i + 1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let curColor = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int xMod16, mask, i;
            let xMod16 = x & 15; // Works because 16=2^4
            let mask = 1;
            let i = 0;
            while (i < xMod16) {
                let mask = ^mask;
                let i = i + 1;
            }
            do Screen.drawMask(Screen.getAddr(x,y), mask);
            return;
        }

        function int getAddr (int x, int y) {
            return screenBase + (^(^(^(^(^y))))) + (#(#(#(#x))));
        }

        function void drawMask(int addr, int mask) {
            var int pixel;
            let pixel = Memory.peek(addr);
            if (curColor) {
                // Leave all bits as is, echept for x%16-th bit, which is set to 1
                do Memory.poke(addr, pixel | mask);
            }
            else {
                // Turn mask from a 1 padded by 0 to a 0 padded by 1
                let mask = ~mask;
                // Leave all bits as is, echept for x%16-th bit, which is set to 0
                do Memory.poke(addr, pixel & mask);
            }
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var boolean swap;
            if (x1 = x2) {
                do Screen.drawVerticalLine(x1, y1, y2);
                return;
            }
            if (y1 = y2) {
                do Screen.drawHorizontalLine(y1, x1, x2);
                return;
            }
            let swap = x1 > x2;
            if (swap) {
                do Screen.drawDiagonalLine(x2, y2, x1, y1);
            }
            else {
                do Screen.drawDiagonalLine(x1, y1, x2, y2);
            }
            return;
        }

        function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
            var int a, b, diff, dx, dy, sgny;
            let a = 0;
            let b = 0;
            let diff = 0;
            let dx = x2 - x1;
            let dy = y2 - y1;

            if (y2 > y1) {
                let sgny = 1;
            }
            else {
                let sgny = -1;
            }
            // ~A & ~B = ~(A | B)
            while (~((a > dx) | (Math.abs(b) > Math.abs(dy)))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + Math.abs(dy);
                }
                else {
                    let b = b + sgny;
                    let diff = diff - dx;
                }
            }
            return;
        }

        function void drawVerticalLine(int x, int y1, int y2) {
            var int y;
            let y = Math.min(y1, y2);
                while (~(y > Math.max(y1, y2))) {
                    do Screen.drawPixel(x,y);
                    let y = y + 1;
                }
            return;
        }

        function void drawHorizontalLine(int y, int x1, int x2) {
            var int addr1, addr2, addr1Mod, addr2Mod, addr, mask, diff, i;
            let addr1 = Screen.getAddr(Math.min(x1, x2), y);
            let addr2 = Screen.getAddr(Math.max(x1, x2), y);
            let addr1Mod = Math.min(x1, x2) & 15;
            let addr2Mod = Math.max(x1, x2) & 15;
            let addr = addr1 + 1;
            while (addr < addr2) {
                do Memory.poke(addr, curColor);
                let addr = addr + 1;
            }
            if (addr1 = addr2) {
                let mask = 1;
                let diff = addr2Mod - addr1Mod;
                let i = 0;
                while (i < addr2Mod) {
                    let mask = ^mask;
                    if (i < diff) {
                        let mask = mask + 1;
                    }
                    let i = i + 1;
                }
                do Screen.drawMask(addr1, mask);
            }
            else {
                let mask = 0;
                let i = 0;
                while (i < addr1Mod) {
                    let mask = ^mask;
                    let mask = mask + 1;
                    let i = i + 1;
                }
                do Screen.drawMask(addr1, ~mask);
                let mask = 1;
                let i = 0;
                while (i < addr2Mod) {
                    let mask = ^mask;
                    let mask = mask + 1;
                    let i = i + 1;
                }
                do Screen.drawMask(addr2, mask);
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int y;
            let y = y1;
            while (~(y > y2)) {
                do Screen.drawLine(x1, y, x2, y);
                let y = y + 1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy, halfWidth;
            if (r > 181) { //Overflow
                return;
            }
            let dy = -r;
            while (~(dy > r)) {
                let halfWidth = Math.sqrt((r*r) - (dy*dy));
                do Screen.drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy);
                let dy = dy + 1;
            }
            return;
        }
}
