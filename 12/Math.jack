// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

        static int qy2;
        static Array twoToThe;

        /** Initializes the library. */
        function void init() {
            var int i;
            let i = 1;
            let qy2 = 0;
            let twoToThe = Array.new(16);
            let twoToThe[0] = 1;
            while (i < 16) {
                let twoToThe[i] = ^twoToThe[i - 1];
                let i = i + 1;
            }
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            var int res, mask, shiftedx, i;
            let i = 0;
            let res = 0;
            let mask = 1;
            let shiftedx = x;
            while (i < 16) {
                if (~((mask & y) = 0)) {
                    let res = res + shiftedx;
                }
                let mask = ^mask;
                let shiftedx = ^shiftedx;
                let i = i + 1;
            }
            return res;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var bool flip_sign;
            var int res;
            let flip_sign = false;
            if (x < 0) {
                let x = -x;
                let flip_sign = ~flip_sign;
            }
            if (y < 0) {
                let y = -y;
                let flip_sign = ~flip_sign;
            }
            let res = Math.divide_helper(x, y);
            if (flip_sign) {
                return -res;
            }
            return res;
        }

        function int divide_helper(int x, int y) {
            var int q;
            if ((y > x) | (y < 0)) {
                let qy2 = 0;
                return 0;
            }
            let q = Math.divide_helper(x, ^y);

            if ((x - qy2) < y) {
                return ^q;
            }
            else {
                let qy2 = qy2 + y;
                return (^q) + 1;
            }

        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, ySquare, val;
            if (x < 0) {
                return 0;
            }
            let y = 0;
            let ySquare = 0;
            let j = 7; // Number of bits/2 - 1
            while (j > -1) {
                let val = ySquare + Math.shiftNtimes(y, j + 1) + twoToThe[^j];
                if ((~(val > x)) & (val > 0)) {
                    let ySquare = val;
                    let y = y + twoToThe[j];
                }
                let j = j - 1;
            }

            return y;

        }

        function int shiftNtimes (int x, int n) {
            var int i, shiftedx;
            let i = 0;
            let shiftedx = x;
            while (i < n) {
                let shiftedx = ^shiftedx;
                let i = i + 1;
            }
            return shiftedx;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            }
            return b;
        }
}
